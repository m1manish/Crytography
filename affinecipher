# Function to encrypt the text using Affine Cipher
def affine_encrypt(text, a, b):
    result = ""
    for char in text:
        if char.isalpha():
            # Convert char to uppercase and find its index (0-25)
            char = char.upper()
            x = ord(char) - ord('A')
            # Apply the affine cipher formula: (a*x + b) % 26
            encrypted_char = (a * x + b) % 26
            # Convert back to a letter
            result += chr(encrypted_char + ord('A'))
        else:
            # If character is not a letter, keep it as is
            result += char
    return result

# Function to decrypt the text using Affine Cipher
def affine_decrypt(text, a, b):
    result = ""
    # Find the modular inverse of a under modulo 26
    a_inv = mod_inverse(a, 26)
    if a_inv is None:
        raise ValueError("No modular inverse exists for the given 'a' value.")
    
    for char in text:
        if char.isalpha():
            # Convert char to uppercase and find its index (0-25)
            char = char.upper()
            y = ord(char) - ord('A')
            # Apply the affine cipher decryption formula: a_inv * (y - b) % 26
            decrypted_char = (a_inv * (y - b)) % 26
            # Convert back to a letter
            result += chr(decrypted_char + ord('A'))
        else:
            # If character is not a letter, keep it as is
            result += char
    return result

# Function to find the modular inverse of a under modulo m
def mod_inverse(a, m):
    for i in range(1, m):
        if (a * i) % m == 1:
            return i
    return None

# Example usage:
plaintext = "Hello, World!"
a = 5  # 'a' value in the affine cipher
b = 8  # 'b' value in the affine cipher

# Encrypting the text
encrypted_text = affine_encrypt(plaintext, a, b)
print("Encrypted:", encrypted_text)

# Decrypting the text
decrypted_text = affine_decrypt(encrypted_text, a, b)
print("Decrypted:", decrypted_text)


OUTPUT:

Encrypted: MJQQT, Btwqi!
Decrypted: HELLO, WORLD!
