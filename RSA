import random
from sympy import isprime, mod_inverse

# Generate two large prime numbers
def generate_primes():
    while True:
        p = random.randint(50, 100)
        q = random.randint(50, 100)
        if isprime(p) and isprime(q):
            return p, q

# Generate RSA keys
def generate_keys():
    p, q = generate_primes()
    n = p * q
    phi = (p - 1) * (q - 1)
    
    # Choose e such that 1 < e < phi and gcd(e, phi) = 1
    e = 3
    while True:
        if isprime(e) and phi % e != 0:
            break
        e += 2

    # Calculate d (modular multiplicative inverse of e)
    d = mod_inverse(e, phi)
    return e, d, n

# Encrypt a message (word) by converting each character to its ASCII value


OUTPUT:
//Output
// Generated Prime p: 32429
// Generated Prime q: 21799
// Public Key: (e = 31513, n = 706919771)
// Private Key: (d = 407435209, n = 706919771)
// Enter a message to encrypt: SHEISLISTENING
// Encrypted message: 525283347 534686148 392983059 240060037 525283347 602634667 240060037 525283347 388817816 392983059 6831066 240060037 6831066 385034831
// Decrypted message: SHEISLISTENING
def encrypt(message, e, n):
    return [(ord(char) ** e) % n for char in message]

# Decrypt a list of encrypted integers
def decrypt(ciphertext, d, n):
    return ''.join([chr((char ** d) % n) for char in ciphertext])

# Main
e, d, n = generate_keys()
print(f"Public key: (e={e}, n={n})")
print(f"Private key: (d={d}, n={n})")

# Input word
word = "HELLO"

# Encrypt the word
cipher = encrypt(word, e, n)
print("Encrypted:", cipher)

# Decrypt back to plaintext
decrypted = decrypt(cipher, d, n)
print("Decrypted:", decrypted)
